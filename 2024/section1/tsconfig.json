{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* 점진적 컴파일을 활성화합니다. */
    // "composite": true,                                /* 프로젝트 참조를 위한 복합 프로젝트를 활성화합니다. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* .tsbuildinfo 파일의 경로를 지정합니다. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* 프로젝트 참조 시 소스 파일 리디렉션을 비활성화합니다. */
    // "disableSolutionSearching": true,                 /* 프로젝트 참조 검색을 비활성화합니다. */
    // "disableReferencedProjectLoad": true,             /* 자동으로 로드되는 프로젝트 수를 줄입니다. */

    /* Language and Environment */
    "target": "es2016" /* 생성할 JavaScript의 버전을 설정합니다. */,
    // "lib": [],                                        /* 컴파일에 포함할 라이브러리 파일들을 지정합니다. */
    // "jsx": "preserve",                                /* JSX 코드 생성 스타일을 지정합니다. */
    // "experimentalDecorators": true,                   /* 데코레이터의 실험적 지원을 활성화합니다. */
    // "emitDecoratorMetadata": true,                    /* 데코레이터를 위한 메타데이터를 생성합니다. */
    // "jsxFactory": "",                                 /* JSX 팩토리 함수를 지정합니다. */
    // "jsxFragmentFactory": "",                         /* JSX Fragment 팩토리 함수를 지정합니다. */
    // "jsxImportSource": "",                            /* JSX 팩토리 함수의 모듈을 지정합니다. */
    // "reactNamespace": "",                             /* React JSX에서 'createElement'를 호출할 객체를 지정합니다. */
    // "noLib": true,                                    /* 라이브러리 파일들을 포함하지 않습니다. */
    // "useDefineForClassFields": true,                  /* 클래스 필드를 위한 ECMAScript 표준 문법을 사용합니다. */
    // "moduleDetection": "auto",                        /* 모듈 형식을 자동으로 감지합니다. */

    /* Modules */
    "module": "commonjs" /* 생성할 모듈 코드 형식을 지정합니다. */,
    // "rootDir": "./",                                  /* 소스 파일들의 루트 폴더를 지정합니다. */
    // "moduleResolution": "node10",                     /* 모듈 해석 방식을 지정합니다. */
    // "baseUrl": "./",                                  /* 비상대적 모듈 이름을 해결할 기본 디렉토리를 지정합니다. */
    // "paths": {},                                      /* 모듈 경로 매핑을 지정합니다. */
    // "rootDirs": [],                                   /* 여러 폴더를 하나로 취급하여 모듈을 해결합니다. */
    // "typeRoots": [],                                  /* 타입 선언 파일들의 폴더를 지정합니다. */
    // "types": [],                                      /* 포함할 타입 패키지들을 지정합니다. */
    // "allowUmdGlobalAccess": true,                     /* 모듈에서 UMD 전역 접근을 허용합니다. */
    // "moduleSuffixes": [],                             /* 모듈을 해결할 때 사용할 접미사 목록을 지정합니다. */
    // "allowImportingTsExtensions": true,               /* TypeScript 파일 확장자를 포함한 import를 허용합니다. */
    // "resolvePackageJsonExports": true,                /* 패키지 import 시 package.json의 'exports' 필드를 사용합니다. */
    // "resolvePackageJsonImports": true,                /* import 시 package.json의 'imports' 필드를 사용합니다. */
    // "customConditions": [],                           /* 모듈 해석 시 기본 조건 외에 사용자 지정 조건을 설정합니다. */
    // "resolveJsonModule": true,                        /* JSON 파일을 import할 수 있도록 합니다. */
    // "allowArbitraryExtensions": true,                 /* 선언 파일이 있는 경우 임의의 파일 확장자 import를 허용합니다. */
    // "noResolve": true,                                /* 'import', 'require', '<reference>'가 파일 수를 확장하는 것을 금지합니다. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* 프로젝트에 JavaScript 파일들을 포함할 수 있게 합니다. */
    // "checkJs": true,                                  /* JavaScript 파일에서 오류 보고를 활성화합니다. */
    // "maxNodeModuleJsDepth": 1,                        /* node_modules에서 JavaScript 파일을 검사할 최대 폴더 깊이를 지정합니다. */

    /* Emit */
    // "declaration": true,                              /* .d.ts 파일을 생성합니다. */
    // "declarationMap": true,                           /* .d.ts 파일에 대한 소스 맵을 생성합니다. */
    // "emitDeclarationOnly": true,                      /* .d.ts 파일만 생성하고 JavaScript 파일은 생성하지 않습니다. */
    // "sourceMap": true,                                /* 생성된 JavaScript 파일에 대한 소스 맵 파일을 생성합니다. */
    // "inlineSourceMap": true,                          /* 소스 맵 파일을 생성된 JavaScript에 포함시킵니다. */
    // "outFile": "./",                                  /* 모든 출력물을 하나의 JavaScript 파일로 번들링합니다. */
    "outDir": "dist" /* 생성된 파일의 출력 폴더를 지정합니다. */,
    // "removeComments": true,                           /* 생성된 파일에서 주석을 제거합니다. */
    // "noEmit": true,                                   /* 파일 생성을 비활성화합니다. */
    // "importHelpers": true,                            /* tslib을 사용하여 헬퍼 함수를 가져옵니다. */
    // "downlevelIteration": true,                       /* 구형 JavaScript를 위한 더 준수한 반복문 코드를 생성합니다. */
    // "sourceRoot": "",                                 /* 디버거가 소스 코드를 찾을 수 있는 루트 경로를 지정합니다. */
    // "mapRoot": "",                                    /* 디버거가 맵 파일을 찾을 수 있는 위치를 지정합니다. */
    // "inlineSources": true,                            /* 소스 맵에 소스 코드를 포함시킵니다. */
    // "emitBOM": true,                                  /* 출력 파일의 시작 부분에 UTF-8 BOM을 생성합니다. */
    // "newLine": "crlf",                                /* 출력 파일에서 사용할 새 줄 문자를 설정합니다. */
    // "stripInternal": true,                            /* '@internal' 주석이 있는 선언을 제거합니다. */
    // "noEmitHelpers": true,                            /* 사용자 정의 헬퍼 함수 생성 비활성화합니다. */
    // "noEmitOnError": true,                            /* 타입 검사 오류가 있는 경우 파일 생성을 비활성화합니다. */
    // "preserveConstEnums": true,                       /* 'const enum' 선언을 생성된 코드에 유지합니다. */
    // "declarationDir": "./",                           /* 생성된 선언 파일의 출력 디렉토리를 지정합니다. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* 각 파일을 독립된 모듈로 안전하게 트랜스파일할 수 있게 합니다. */
    // "verbatimModuleSyntax": true,                     /* 타입 전용으로 표시되지 않은 import/export를 변환하거나 생략하지 않습니다. */
    // "isolatedDeclarations": true,                     /* 선언 파일을 생성하기 위한 충분한 주석을 요구합니다. */
    // "allowSyntheticDefaultImports": true,             /* 모듈에 기본 내보내기가 없을 때 'import x from y'를 허용합니다. */
    "esModuleInterop": true /* CommonJS 모듈 interop을 지원하기 위해 추가 JS를 생성합니다. */,
    // "preserveSymlinks": true,                         /* 모듈 해석 시 심볼릭 링크를 실제 경로로 해석하지 않습니다. */
    "forceConsistentCasingInFileNames": true /* 파일 이름의 대소문자 일관성을 강제합니다. */,

    /* Type Checking */
    "strict": true /* 모든 엄격한 타입 검사 옵션을 활성화합니다. */,
    // "noImplicitAny": true,                            /* 암시적 'any' 타입에 대한 오류 보고를 활성화합니다. */
    // "strictNullChecks": true,                         /* 'null'과 'undefined'를 엄격히 검사합니다. */
    // "strictFunctionTypes": true,                      /* 함수 타입 검사 시 파라미터와 반환 값의 하위 호환성을 확인합니다. */
    // "strictBindCallApply": true,                      /* 'bind', 'call', 'apply' 메서드의 인수를 원래 함수와 일치하도록 확인합니다. */
    // "strictPropertyInitialization": true,             /* 선언된 클래스 속성이 생성자에서 초기화되었는지 확인합니다. */
    // "noImplicitThis": true,                           /* 'this'에 암시적 'any' 타입이 할당되는 것을 금지합니다. */
    // "useUnknownInCatchVariables": true,               /* catch 변수의 기본 타입을 'any' 대신 'unknown'으로 설정합니다. */
    // "alwaysStrict": true,                             /* 생성된 코드에 'use strict'를 항상 추가합니다. */
    // "noUnusedLocals": true,                           /* 사용되지 않는 로컬 변수에 대한 오류 보고를 활성화합니다. */
    // "noUnusedParameters": true,                       /* 사용되지 않는 파라미터에 대한 오류 보고를 활성화합니다. */
    // "exactOptionalPropertyTypes": true,               /* 선택적 속성 타입을 작성된 그대로 해석합니다. */
    // "noImplicitReturns": true,                        /* 반환되지 않는 코드 경로에 대한 오류 보고를 활성화합니다. */
    // "noFallthroughCasesInSwitch": true,               /* switch 문에서 fallthrough 사례에 대한 오류 보고를 활성화합니다. */
    // "noUncheckedIndexedAccess": true,                 /* 인덱스로 접근 시 타입에 'undefined'를 추가합니다. */
    // "noImplicitOverride": true,                       /* 파생 클래스의 재정의된 멤버에 'override' 수식어가 필요합니다. */
    // "noPropertyAccessFromIndexSignature": true,       /* 인덱스 시그니처로 선언된 키에 대한 속성 접근을 강제합니다. */
    // "allowUnusedLabels": true,                        /* 사용되지 않는 레이블에 대한 오류 보고를 비활성화합니다. */
    // "allowUnreachableCode": true,                     /* 도달할 수 없는 코드에 대한 오류 보고를 비활성화합니다. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* 기본 라이브러리 파일의 타입 검사를 건너뜁니다. */
    "skipLibCheck": true /* 모든 선언 파일의 타입 검사를 건너뜁니다. */
  },
  "include": ["src"] /* 'src' 디렉토리의 파일들을 포함합니다. */,
  "ts-node": {
    "esm": true /* ts-node에서 ESM 지원을 활성화합니다. */
  }
}
